class Solution {
    public int numIslands(char[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        boolean[][] vis = new boolean[m][n];
        int count = 0;
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (!vis[i][j] && grid[i][j] == '1'){
                    count++;
                    dfs(i,j,vis,grid);
                }
            }
        }
        return count;
    }

    public void dfs(int i,int j,boolean[][] vis,char[][] grid){
        if (i == grid.length || i < 0 || j == grid[0].length || j < 0 || vis[i][j] == true || grid[i][j] == '0'){
            return;
        }

        vis[i][j] = true;

        dfs(i + 1,j,vis,grid);
        dfs(i - 1,j,vis,grid);
        dfs(i,j - 1,vis,grid);
        dfs(i,j + 1,vis,grid);
    }    
}
