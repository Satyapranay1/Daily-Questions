class Solution {
    public int maxKDivisibleComponents(int n, int[][] edges, int[] values, int k) {
        List<Integer>[] adj = new ArrayList[n];
        for (int i = 0; i < n; i++){
            adj[i] = new ArrayList<>();
        }
        System.out.println(adj.length);

        for (int[] in : edges){
            int src = in[0];
            int dest = in[1];
            adj[src].add(dest);
            adj[dest].add(src);
        }
        int[] com = {0};
        Recur(0,-1,adj,com,k,values);
        return com[0];
    }

    public int Recur(int curr,int parent,List<Integer>[] adj,int[] com,int k,int[] values){
        int sum = 0;
        for (int n1 : adj[curr]){
            if (n1 != parent){
                sum += Recur(n1,curr,adj,com,k,values);
                sum %= k;
            }
        }

        sum += values[curr];
        sum %= k;
        if (sum == 0){
            com[0]++;
        }
        return sum;
    }
}
