class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n = graph.length;
        List<Integer> ans = new ArrayList<>();
        List<List<Integer>> adj = new ArrayList<>();
        Queue<Integer> q = new LinkedList<>();
        int[] ind = new int[n];
        boolean[] safe = new boolean[graph.length];
        for (int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }
        

        for (int i = 0; i < n; i++){
            for (int no : graph[i]){
                ind[i]++;
                adj.get(no).add(i);
            }
        }


        for (int i = 0; i < n; i++){
            if (ind[i] == 0){
                q.offer(i);
            }
        }

        while (!q.isEmpty()){
            int curr = q.poll();
            safe[curr] = true;

            for (int x : adj.get(curr)){
                ind[x]--;
                if (ind[x] == 0){
                    q.offer(x);
                }
            }
        }

        for (int i = 0; i < n; i++){
            if (safe[i]){
                ans.add(i);
            }
        }
        return ans;
    }
}
