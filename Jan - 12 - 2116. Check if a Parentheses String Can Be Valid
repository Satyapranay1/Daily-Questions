class Solution {
    public boolean canBeValid(String s, String locked) {
        Stack<Integer> open = new Stack<>();
        Stack<Integer> un = new Stack<>();

        if (s.length() % 2 == 1){
            return false;
        }
        for (int i = 0; i < s.length(); i++){
            if (locked.charAt(i) == '0'){
                un.push(i);
            }
            else if (s.charAt(i) == '('){
                open.push(i);
            }

            else if (s.charAt(i) == ')'){
                if (!open.isEmpty()){
                    open.pop();
                }
                else if (!un.isEmpty()){
                    un.pop();
                }
                else{
                    return false;
                }
            }
        }


        while (!open.isEmpty() && !un.isEmpty() && open.peek() < un.peek()){
            open.pop();
            un.pop();
        }

        return open.isEmpty();
    }
}
