class Solution {
    public int minDominoRotations(int[] tops, int[] bottoms) {
        int n = tops.length;
        HashMap<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < n; i++){
            if (tops[i] == bottoms[i]){
                map.put(tops[i],map.getOrDefault(tops[i],0) + 1);
            }
            else{
                map.put(tops[i],map.getOrDefault(tops[i],0) + 1);
                map.put(bottoms[i],map.getOrDefault(bottoms[i],0) + 1);
            }
        }

        int ans = 0;
        boolean possible = false;

        for (int val : map.keySet()){
            int y = map.get(val);
            if (y == n){
                possible = true;
                ans = val;
                break;
            }
        }

        if (!possible){
            return -1;
        }

        int cnt = 0,cnt1 = 0;
        for (int i = 0; i < n; i++){
            if (ans != tops[i]){
                cnt++;
            }

            if (ans != bottoms[i]){
                cnt1++;
            }
        }
        return Math.min(cnt,cnt1);
    }
}
