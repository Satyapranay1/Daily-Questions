class Solution {
    public long numberOfPowerfulInt(long start, long finish, int limit, String s) {
        return Count(finish,limit,s) - Count(start - 1,limit,s);
    }

    public long Count(long end,int limit,String fix){
        String end1 = Long.toString(end);
        int pref = end1.length() - fix.length();

        if (pref < 0){
            return 0;
        }

        long[][] dp = new long[pref + 1][2];
        dp[pref][0] = 1;
        dp[pref][1] = end1.substring(pref).compareTo(fix) >= 0 ? 1 : 0;
        for (int i = pref - 1; i >= 0; i--){
            int curr = end1.charAt(i) - '0';
            dp[i][0] = (limit + 1) * dp[i + 1][0];
            if (curr <= limit){
                dp[i][1] = (long) curr * dp[i + 1][0] + dp[i + 1][1];
            }
            else{
                dp[i][1] = (long) (limit + 1) * dp[i + 1][0];
            }
        }
        return dp[0][1];
    }
}
