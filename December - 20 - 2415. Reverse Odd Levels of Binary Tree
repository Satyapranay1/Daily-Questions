/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode reverseOddLevels(TreeNode root) {
        if (root == null){
            return root;
        }

        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        int level = 0;
        while (!q.isEmpty()){
            int size = q.size();
            List<TreeNode> lev = new ArrayList<>();
            for (int i = 0; i < size; i++){
                TreeNode curr = q.poll();
                lev.add(curr);
                if (curr.left != null){
                    q.offer(curr.left);
                }
                
                if (curr.right != null){
                    q.offer(curr.right);
                }
            }

            if (level % 2 == 1){
                int left = 0,right = lev.size() - 1;
                while (left < right){
                    int temp = lev.get(left).val;
                    lev.get(left).val = lev.get(right).val;
                    lev.get(right).val = temp;
                    left++;
                    right--;
                }
            }
            level++;
            
        }
        return root;
    }
}
