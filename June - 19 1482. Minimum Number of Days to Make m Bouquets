class Solution {
    public int minDays(int[] bloomDay, int m, int k) {
        int n = bloomDay.length;
        long val = (long) m * k;
        if (val > n){
            return -1;
        }

        int left = Arrays.stream(bloomDay).min().getAsInt();
        int right = Arrays.stream(bloomDay).max().getAsInt();

        while (left <= right){
            int mid = (left + right) / 2;
            if (isSafe(bloomDay,m,k,mid)){
                right = mid - 1;
            }
            else{
                left = mid + 1;
            }
        }
        return left;
    }

    public boolean isSafe(int[] nums,int m,int k,int mid){
        int count = 0;
        int streak = 0;
        for (int i = 0; i < nums.length; i++){
            if (nums[i] <= mid){
                streak++;
            }
            else{
                count += streak / k;
                streak = 0;
            }
        }
        count += streak / k;
        return count >= m;
    }
}
