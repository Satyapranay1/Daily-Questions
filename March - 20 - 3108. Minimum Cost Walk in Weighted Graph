class Solution {
    public int[] minimumCost(int n, int[][] edges, int[][] query) {
        List<List<int[]>> adj = new ArrayList<>();
        for (int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }

        for (int i = 0; i < edges.length; i++){
            adj.get(edges[i][0]).add(new int[]{edges[i][1],edges[i][2]});
            adj.get(edges[i][1]).add(new int[]{edges[i][0],edges[i][2]});
        }

        boolean[] vis = new boolean[n];
        List<Integer> cost = new ArrayList<>();
        int[] comp = new int[n];
        int id = 0;
        for (int node = 0; node < n; node++){
            if (!vis[node]){
                cost.add(GetCost(adj,id,node,vis,comp));
                id++;
            }
        }

        int[] ans = new int[query.length];
        for (int i = 0; i < query.length; i++){
            int start = query[i][0],end = query[i][1];
            if (comp[start] == comp[end]){
                ans[i] = cost.get(comp[start]);
            }
            else{
                ans[i] = -1;
            }
        }
        return ans;
    }

    public int GetCost(List<List<int[]>> adj,int id,int node,boolean[] vis,int[] comp){
        Queue<Integer> q = new LinkedList<>();
        q.offer(node);
        int cost = Integer.MAX_VALUE;
        vis[node] = true;
        while (!q.isEmpty()){
            int curr = q.poll();
            comp[curr] = id;
            for (int[] ne : adj.get(curr)){
                int w = ne[1];
                cost &= w;

                if (vis[ne[0]]) continue;
                q.offer(ne[0]);
                vis[ne[0]] = true;
            }
        }
        return cost;
    }
}
