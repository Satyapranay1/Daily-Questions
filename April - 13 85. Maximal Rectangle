class Solution {
    public int maximalRectangle(char[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[] nums = new int[n];
        int max = 0;
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                if (matrix[i][j] == '1'){
                    nums[j]++;
                }
                else {
                    nums[j] = 0;
                }
            }
            int ans = findMax(nums);
            max = Math.max(max,ans);
        }
        return max;
    }

    public int findMax(int[] nums){
        Stack<Integer> st = new Stack<>();
        int max = 0;
        int n = nums.length;
        for (int i = 0; i <= n; i++){
            while (!st.isEmpty() && (i == n || nums[st.peek()] >= nums[i])){
                int el = nums[st.pop()];
                int height = el;
                int width = 0;
                if (st.isEmpty()){
                    width = i;
                }
                else{
                    width = i - st.peek() - 1;
                }
                max = Math.max(max,height * width);
            }
            st.push(i);
        }
        return max;
    }
}
