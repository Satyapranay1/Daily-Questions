/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int[] ans = new int[2];
        if (head == null || head.next == null || head.next.next == null){
            return new int[]{-1,-1};
        }

        ans[0] = Integer.MAX_VALUE;
        ListNode prev = head,curr = head.next;
        int min0 = -1,count = 1,max = -1;
        while (curr.next != null){
            if (check(prev.val,curr.val,curr.next.val)){
                if (min0 == -1){
                    min0 = count;
                }
                if(max != -1){
                    ans[0] = Math.min(ans[0],count - max);
                }

                max = Math.max(max,count);

            }
            count++;
            prev = prev.next;
            curr = curr.next;
        }

        if (ans[0] == Integer.MAX_VALUE){
            ans[0] = -1;
            ans[1] = -1;
            return ans;
        }
        ans[1] = max - min0;
        return ans;
    }

    public boolean check(int prev,int curr,int next){
        return ((curr > prev) && (curr > next)) || ((curr < prev) && (curr < next)); 
    }
}
