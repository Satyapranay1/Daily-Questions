class Solution {
    public int minimumTime(int[][] grid) {
        if (grid[0][1] > 1 && grid[1][0] > 1){
            return -1;
        }

        int m = grid.length,n = grid[0].length;
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        boolean[][] vis = new boolean[m][n];
        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> Integer.compare(a[0],b[0]));
        pq.offer(new int[]{grid[0][0],0,0});
        while (!pq.isEmpty()){
            int[] curr = pq.poll();
            int time = curr[0],row = curr[1],col = curr[2];

            if (row == m - 1 && col == n - 1){
                return time;
            }

            if (vis[row][col]){
                continue;
            }

            vis[row][col] = true;

            for (int[] d : dirs){
                int nx = row + d[0],ny = col + d[1];
                if (nx >= 0 && ny >= 0 && nx < m && ny < n && !vis[nx][ny]){
                    int wait = (grid[nx][ny] - time) % 2 == 0 ? 1 : 0;
                    int next = Math.max(grid[nx][ny] + wait,time + 1);
                    pq.offer(new int[]{next,nx,ny});
                }
            }
        }
        return -1;
    }
}
